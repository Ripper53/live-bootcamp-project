name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          app-service/.cargo
          app-service/target/
          auth-service-workspace/.cargo
          auth-service-workspace/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test app-service code
      working-directory: ./app-service
      run: |
        cargo build --verbose
        cargo test --verbose

    - name: Build and test auth-service code
      working-directory: ./auth-service-workspace
      run: |
        cargo build --verbose
        cargo test --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create JWT secret file
      run: |
        echo "${{ secrets.JWT_SECRET }}" > $RUNNER_TEMP/jwt_secret

    - name: List contents of auth-service-workspace
      run: ls -la ./auth-service-workspace

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      arg:
        RUNNER_TEMP: $RUNNER_TEMP
      with:
        file: ./auth-service-workspace/Dockerfile
        push: true
        tags: esotericquietus/auth-service:latest
        secrets: |
          id=jwt_secret,src=$RUNNER_TEMP/jwt_secret

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Add DO Droplet to SSH known hosts
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.DROPLET_HOST }} $(ssh-keyscan ${{ secrets.DROPLET_HOST }} 2>/dev/null)" >> ~/.ssh/known_hosts

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name: Copy compose.yml to droplet
      env:
        DROPLET_SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
        DROPLET_SSH_KEY_PASSPHRASE: ${{ secrets.DROPLET_PASSWORD }}
      run: |
        echo "${DROPLET_SSH_KEY}" > private_key.pem
        chmod 600 private_key.pem
        eval "$(ssh-agent -s)"
        ssh-add private_key.pem <<< "$DROPLET_SSH_KEY_PASSPHRASE"
        scp compose.yml root@${{ secrets.DROPLET_HOST }}:~
        rm -f private_key.pem

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DROPLET_HOST }}
        username: root
        key: ${{ secrets.DROPLET_SSH_KEY }}
        passphrase: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          export AUTH_SERVICE_IP=${{ secrets.DROPLET_HOST }}
          docker compose down
          docker compose pull
          docker compose up -d
